
AlfaSim.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  00000248  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001d4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000015  00800200  00800200  00000248  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000248  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000278  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  000002b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000dd1  00000000  00000000  00000308  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c59  00000000  00000000  000010d9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003fe  00000000  00000000  00001d32  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000074  00000000  00000000  00002130  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005ec  00000000  00000000  000021a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000042  00000000  00000000  00002790  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  000027d2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	81 c0       	rjmp	.+258    	; 0x108 <__bad_interrupt>
   6:	00 00       	nop
   8:	7f c0       	rjmp	.+254    	; 0x108 <__bad_interrupt>
   a:	00 00       	nop
   c:	7d c0       	rjmp	.+250    	; 0x108 <__bad_interrupt>
   e:	00 00       	nop
  10:	7b c0       	rjmp	.+246    	; 0x108 <__bad_interrupt>
  12:	00 00       	nop
  14:	79 c0       	rjmp	.+242    	; 0x108 <__bad_interrupt>
  16:	00 00       	nop
  18:	77 c0       	rjmp	.+238    	; 0x108 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	75 c0       	rjmp	.+234    	; 0x108 <__bad_interrupt>
  1e:	00 00       	nop
  20:	73 c0       	rjmp	.+230    	; 0x108 <__bad_interrupt>
  22:	00 00       	nop
  24:	71 c0       	rjmp	.+226    	; 0x108 <__bad_interrupt>
  26:	00 00       	nop
  28:	6f c0       	rjmp	.+222    	; 0x108 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	6d c0       	rjmp	.+218    	; 0x108 <__bad_interrupt>
  2e:	00 00       	nop
  30:	6b c0       	rjmp	.+214    	; 0x108 <__bad_interrupt>
  32:	00 00       	nop
  34:	69 c0       	rjmp	.+210    	; 0x108 <__bad_interrupt>
  36:	00 00       	nop
  38:	67 c0       	rjmp	.+206    	; 0x108 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	65 c0       	rjmp	.+202    	; 0x108 <__bad_interrupt>
  3e:	00 00       	nop
  40:	63 c0       	rjmp	.+198    	; 0x108 <__bad_interrupt>
  42:	00 00       	nop
  44:	61 c0       	rjmp	.+194    	; 0x108 <__bad_interrupt>
  46:	00 00       	nop
  48:	5f c0       	rjmp	.+190    	; 0x108 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	5d c0       	rjmp	.+186    	; 0x108 <__bad_interrupt>
  4e:	00 00       	nop
  50:	5b c0       	rjmp	.+182    	; 0x108 <__bad_interrupt>
  52:	00 00       	nop
  54:	59 c0       	rjmp	.+178    	; 0x108 <__bad_interrupt>
  56:	00 00       	nop
  58:	57 c0       	rjmp	.+174    	; 0x108 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	55 c0       	rjmp	.+170    	; 0x108 <__bad_interrupt>
  5e:	00 00       	nop
  60:	53 c0       	rjmp	.+166    	; 0x108 <__bad_interrupt>
  62:	00 00       	nop
  64:	51 c0       	rjmp	.+162    	; 0x108 <__bad_interrupt>
  66:	00 00       	nop
  68:	4f c0       	rjmp	.+158    	; 0x108 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	4d c0       	rjmp	.+154    	; 0x108 <__bad_interrupt>
  6e:	00 00       	nop
  70:	4b c0       	rjmp	.+150    	; 0x108 <__bad_interrupt>
  72:	00 00       	nop
  74:	49 c0       	rjmp	.+146    	; 0x108 <__bad_interrupt>
  76:	00 00       	nop
  78:	47 c0       	rjmp	.+142    	; 0x108 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	45 c0       	rjmp	.+138    	; 0x108 <__bad_interrupt>
  7e:	00 00       	nop
  80:	43 c0       	rjmp	.+134    	; 0x108 <__bad_interrupt>
  82:	00 00       	nop
  84:	41 c0       	rjmp	.+130    	; 0x108 <__bad_interrupt>
  86:	00 00       	nop
  88:	3f c0       	rjmp	.+126    	; 0x108 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	3d c0       	rjmp	.+122    	; 0x108 <__bad_interrupt>
  8e:	00 00       	nop
  90:	3b c0       	rjmp	.+118    	; 0x108 <__bad_interrupt>
  92:	00 00       	nop
  94:	39 c0       	rjmp	.+114    	; 0x108 <__bad_interrupt>
  96:	00 00       	nop
  98:	37 c0       	rjmp	.+110    	; 0x108 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	35 c0       	rjmp	.+106    	; 0x108 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	33 c0       	rjmp	.+102    	; 0x108 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	31 c0       	rjmp	.+98     	; 0x108 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	2f c0       	rjmp	.+94     	; 0x108 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	2d c0       	rjmp	.+90     	; 0x108 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	2b c0       	rjmp	.+86     	; 0x108 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	29 c0       	rjmp	.+82     	; 0x108 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	27 c0       	rjmp	.+78     	; 0x108 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	25 c0       	rjmp	.+74     	; 0x108 <__bad_interrupt>
  be:	00 00       	nop
  c0:	23 c0       	rjmp	.+70     	; 0x108 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	21 c0       	rjmp	.+66     	; 0x108 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	1f c0       	rjmp	.+62     	; 0x108 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	1d c0       	rjmp	.+58     	; 0x108 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	1b c0       	rjmp	.+54     	; 0x108 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	19 c0       	rjmp	.+50     	; 0x108 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	17 c0       	rjmp	.+46     	; 0x108 <__bad_interrupt>
  da:	00 00       	nop
  dc:	15 c0       	rjmp	.+42     	; 0x108 <__bad_interrupt>
  de:	00 00       	nop
  e0:	13 c0       	rjmp	.+38     	; 0x108 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_clear_bss>:
  f4:	22 e0       	ldi	r18, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	01 c0       	rjmp	.+2      	; 0xfe <.do_clear_bss_start>

000000fc <.do_clear_bss_loop>:
  fc:	1d 92       	st	X+, r1

000000fe <.do_clear_bss_start>:
  fe:	a5 31       	cpi	r26, 0x15	; 21
 100:	b2 07       	cpc	r27, r18
 102:	e1 f7       	brne	.-8      	; 0xfc <.do_clear_bss_loop>
 104:	40 d0       	rcall	.+128    	; 0x186 <main>
 106:	64 c0       	rjmp	.+200    	; 0x1d0 <_exit>

00000108 <__bad_interrupt>:
 108:	7b cf       	rjmp	.-266    	; 0x0 <__vectors>

0000010a <init_core>:

#include <avr/io.h>
#include "core.h"
#include "util.h"

void init_core(){
 10a:	cf 93       	push	r28
 10c:	df 93       	push	r29
	//Chapter 10 Pg 48
	//Set bits in CLKPR to enable prescaler and set to 1/16
	set_bit(CLKPR, CLKPCE);
 10e:	e1 e6       	ldi	r30, 0x61	; 97
 110:	f0 e0       	ldi	r31, 0x00	; 0
 112:	80 81       	ld	r24, Z
 114:	80 68       	ori	r24, 0x80	; 128
 116:	80 83       	st	Z, r24
	set_bit(CLKPR, CLKPS1);
 118:	80 81       	ld	r24, Z
 11a:	82 60       	ori	r24, 0x02	; 2
 11c:	80 83       	st	Z, r24
	set_bit(CLKPR, CLKPS0);
 11e:	80 81       	ld	r24, Z
 120:	81 60       	ori	r24, 0x01	; 1
 122:	80 83       	st	Z, r24
	
	//Chapter 17 Pg 133
	//Set timer prescalers to 1/256 for pwm output
	set_bit(TCCR3B, CS32);
 124:	a1 e9       	ldi	r26, 0x91	; 145
 126:	b0 e0       	ldi	r27, 0x00	; 0
 128:	8c 91       	ld	r24, X
 12a:	84 60       	ori	r24, 0x04	; 4
 12c:	8c 93       	st	X, r24
	set_bit(TCCR4B, CS42);
 12e:	e1 ea       	ldi	r30, 0xA1	; 161
 130:	f0 e0       	ldi	r31, 0x00	; 0
 132:	80 81       	ld	r24, Z
 134:	84 60       	ori	r24, 0x04	; 4
 136:	80 83       	st	Z, r24
	
	//Set FastPWM
	//Timer 3
	set_bit(TCCR3A, WGM31);
 138:	c0 e9       	ldi	r28, 0x90	; 144
 13a:	d0 e0       	ldi	r29, 0x00	; 0
 13c:	88 81       	ld	r24, Y
 13e:	82 60       	ori	r24, 0x02	; 2
 140:	88 83       	st	Y, r24
	set_bit(TCCR3B, WGM32);
 142:	8c 91       	ld	r24, X
 144:	88 60       	ori	r24, 0x08	; 8
 146:	8c 93       	st	X, r24
	set_bit(TCCR3B, WGM33);
 148:	8c 91       	ld	r24, X
 14a:	80 61       	ori	r24, 0x10	; 16
 14c:	8c 93       	st	X, r24
	
	//Timer 4
	set_bit(TCCR4A, WGM31);
 14e:	a0 ea       	ldi	r26, 0xA0	; 160
 150:	b0 e0       	ldi	r27, 0x00	; 0
 152:	8c 91       	ld	r24, X
 154:	82 60       	ori	r24, 0x02	; 2
 156:	8c 93       	st	X, r24
	set_bit(TCCR4B, WGM32);
 158:	80 81       	ld	r24, Z
 15a:	88 60       	ori	r24, 0x08	; 8
 15c:	80 83       	st	Z, r24
	set_bit(TCCR4B, WGM33);
 15e:	80 81       	ld	r24, Z
 160:	80 61       	ori	r24, 0x10	; 16
 162:	80 83       	st	Z, r24
	
	//Set TOP of timers
	ICR3 = 156;
 164:	8c e9       	ldi	r24, 0x9C	; 156
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	90 93 97 00 	sts	0x0097, r25	; 0x800097 <__TEXT_REGION_LENGTH__+0x700097>
 16c:	80 93 96 00 	sts	0x0096, r24	; 0x800096 <__TEXT_REGION_LENGTH__+0x700096>
	ICR4 = 156;	
 170:	90 93 a7 00 	sts	0x00A7, r25	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7000a7>
 174:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7000a6>
 178:	df 91       	pop	r29
 17a:	cf 91       	pop	r28
 17c:	08 95       	ret

0000017e <sleep>:
	}
}

uint8_t sleep(){
	return 0;
}
 17e:	80 e0       	ldi	r24, 0x00	; 0
 180:	08 95       	ret

00000182 <intro>:

uint8_t intro(){
	return 0;
}
 182:	80 e0       	ldi	r24, 0x00	; 0
 184:	08 95       	ret

00000186 <main>:
state_t current_state = SLEEP;

uint8_t (*state_array[10]) ();

int main(void)
{
 186:	c1 df       	rcall	.-126    	; 0x10a <init_core>
 188:	e1 e0       	ldi	r30, 0x01	; 1
 18a:	f2 e0       	ldi	r31, 0x02	; 2
 18c:	8f eb       	ldi	r24, 0xBF	; 191
 18e:	90 e0       	ldi	r25, 0x00	; 0
 190:	91 83       	std	Z+1, r25	; 0x01
 192:	80 83       	st	Z, r24
 194:	81 ec       	ldi	r24, 0xC1	; 193
 196:	90 e0       	ldi	r25, 0x00	; 0
 198:	93 83       	std	Z+3, r25	; 0x03
 19a:	82 83       	std	Z+2, r24	; 0x02
 19c:	e0 91 00 02 	lds	r30, 0x0200	; 0x800200 <_edata>
 1a0:	f0 e0       	ldi	r31, 0x00	; 0
 1a2:	ee 0f       	add	r30, r30
 1a4:	ff 1f       	adc	r31, r31
 1a6:	ef 5f       	subi	r30, 0xFF	; 255
 1a8:	fd 4f       	sbci	r31, 0xFD	; 253
 1aa:	01 90       	ld	r0, Z+
 1ac:	f0 81       	ld	r31, Z
 1ae:	e0 2d       	mov	r30, r0
 1b0:	19 95       	eicall
 1b2:	88 23       	and	r24, r24
 1b4:	51 f0       	breq	.+20     	; 0x1ca <main+0x44>
 1b6:	90 e0       	ldi	r25, 0x00	; 0
 1b8:	01 96       	adiw	r24, 0x01	; 1
 1ba:	0a 97       	sbiw	r24, 0x0a	; 10
 1bc:	34 f4       	brge	.+12     	; 0x1ca <main+0x44>
 1be:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <_edata>
 1c2:	8f 5f       	subi	r24, 0xFF	; 255
 1c4:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <_edata>
 1c8:	e9 cf       	rjmp	.-46     	; 0x19c <main+0x16>
 1ca:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <_edata>
 1ce:	e6 cf       	rjmp	.-52     	; 0x19c <main+0x16>

000001d0 <_exit>:
 1d0:	f8 94       	cli

000001d2 <__stop_program>:
 1d2:	ff cf       	rjmp	.-2      	; 0x1d2 <__stop_program>
